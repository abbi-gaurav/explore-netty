* Core components
* Channel
- *Socket*
- a vehicle for incoming and outgoing data
- Every Channel has an associated ChannelPipeline, which holds a chain of ChannelHandler instances.
- it is associated with a single eventloop for its lifetime
* ChannelFuture
- Asynchronous notification
- Each of Nettyâ€™s outbound I/O operations returns a ChannelFuture; that is, none of them block. 
* EventLoop
- Control Flow
- Multithreading
- Concurrency
- Events and tasks are executed are executed in FIFO order.
- Scheduling tasks
- Threading model
- one eventloop is bound to a single thread
- Netty 4
  - All IO ops and events are handled by the thread that is assigned to the event loop
** Task execution
#+BEGIN_SRC java 
  while (!terminated) {
      List <Runnable> readyEvents = blockUntilReady();
      for (Runnable r : readyEvents){
          r.run();
      }
  }
#+END_SRC
* Events and Handlers
- ChannelHandler  : handle various events
  - default handler implementations in the form of *adapter* classes,
- ChannelPipeline : container for a chain of event handlers
  - Ordered arrangement of ChannelHandlers
* Transports
** OIO
** NIO
** Local transport
** Embedded transport
** Epoll
* Features
** Zero-copy
* ByteBuf
| Heap buffers     |                                      |
| Direct buffer    | not in heap                          |
| Composite buffer | aggregated view of multiple ByteBufs |
|                  |                                      |
